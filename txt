package create

import (
	"fmt"
	"log"

	"google.golang.org/api/calendar/v3"
)

func CreateCalendar(srv *calendar.Service, calendarId string, event *calendar.Event) {
	newEvent, err := srv.Events.Insert(calendarId, event).Do()
	if err != nil {
		log.Fatalf("Unable to create event. %v\n", err)
	}
	fmt.Printf("Event created: %s\n", newEvent.HtmlLink)
}

package delete

import (
	"fmt"
	"log"

	"google.golang.org/api/calendar/v3"
)

func DeleteCalendar(srv *calendar.Service, calendarId string, event *calendar.Event) {
	err := srv.Events.Delete(calendarId, event.Id).Do()
	if err != nil {
		log.Fatalf("Unable to delete event. %v\n", err)
	}
	fmt.Println("Event deleted")
}

package read

import (
	"fmt"
	"log"

	"google.golang.org/api/calendar/v3"
)

func UpdateCalendar(srv *calendar.Service, calendarId string, event *calendar.Event) {
	fetchedEvent, err := srv.Events.Get(calendarId, event.Id).Do()
	if err != nil {
		log.Fatalf("Unable to get event. %v\n", err)
	}
	fmt.Printf("Event fetched: %s\n", fetchedEvent.HtmlLink)
}

package update

import (
	"fmt"
	"log"

	"google.golang.org/api/calendar/v3"
)

func UpdateCalendar(srv *calendar.Service, calendarId string, event *calendar.Event) {
	updatedEvent, err := srv.Events.Update(calendarId, event.Id, event).Do()
	if err != nil {
		log.Fatalf("Unable to update event. %v\n", err)
	}
	fmt.Printf("Event updated: %s\n", updatedEvent.HtmlLink)
}

package main

import (
	"github.com/mieramensatu/quickstart.git/create"
	"github.com/mieramensatu/quickstart.git/delete"
	"github.com/mieramensatu/quickstart.git/read"
	"github.com/mieramensatu/quickstart.git/update"
	"google.golang.org/api/calendar/v3"
)

func main() {
	var srv *calendar.Service
	var calendarId string
	var event calendar.Event
	create.CreateCalendar(srv, calendarId, &event)
	read.UpdateCalendar(srv, calendarId, &event)
	update.UpdateCalendar(srv, calendarId, &event)
	delete.DeleteCalendar(srv, calendarId, &event)
}


//// Retrieve a token, saves the token, then returns the generated client.
//func getClient(config *oauth2.Config) *http.Client {
//	// The file token.json stores the user's access and refresh tokens, and is
//	// created automatically when the authorization flow completes for the first
//	// time.
//	tokFile := "token.json"
//	tok, err := tokenFromFile(tokFile)
//	if err != nil {
//			tok = getTokenFromWeb(config)
//			saveToken(tokFile, tok)
//	}
//	return config.Client(context.Background(), tok)
//}
//
//// Request a token from the web, then returns the retrieved token.
//func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
//	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
//	fmt.Printf("Go to the following link in your browser then type the "+
//			"authorization code: \n%v\n", authURL)
//
//	var authCode string
//	if _, err := fmt.Scan(&authCode); err != nil {
//			log.Fatalf("Unable to read authorization code: %v", err)
//	}
//
//	tok, err := config.Exchange(context.TODO(), authCode)
//	if err != nil {
//			log.Fatalf("Unable to retrieve token from web: %v", err)
//	}
//	return tok
//}
//
//// Retrieves a token from a local file.
//func tokenFromFile(file string) (*oauth2.Token, error) {
//	f, err := os.Open(file)
//	if err != nil {
//			return nil, err
//	}
//	defer f.Close()
//	tok := &oauth2.Token{}
//	err = json.NewDecoder(f).Decode(tok)
//	return tok, err
//}
//
//// Saves a token to a file path.
//func saveToken(path string, token *oauth2.Token) {
//	fmt.Printf("Saving credential file to: %s\n", path)
//	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
//	if err != nil {
//			log.Fatalf("Unable to cache oauth token: %v", err)
//	}
//	defer f.Close()
//	json.NewEncoder(f).Encode(token)
//}

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/calendar/v3"
	"google.golang.org/api/option"
)

// Retrieve a token, saves the token, then returns the generated client.
func getClient(config *oauth2.Config) *http.Client {
	// The file token.json stores the user's access and refresh tokens, and is
	// created automatically when the authorization flow completes for the first
	// time.
	tokFile := "token.json"
	tok, err := tokenFromFile(tokFile)
	if err != nil {
		tok = getTokenFromWeb(config)
		saveToken(tokFile, tok)
	}
	return config.Client(context.Background(), tok)
}

// Request a token from the web, then returns the retrieved token.
func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	fmt.Printf("Go to the following link in your browser then type the "+
		"authorization code: \n%v\n", authURL)

	var authCode string
	if _, err := fmt.Scan(&authCode); err != nil {
		log.Fatalf("Unable to read authorization code: %v", err)
	}

	tok, err := config.Exchange(context.TODO(), authCode)
	if err != nil {
		log.Fatalf("Unable to retrieve token from web: %v", err)
	}
	return tok
}

// Retrieves a token from a local file.
func tokenFromFile(file string) (*oauth2.Token, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	tok := &oauth2.Token{}
	err = json.NewDecoder(f).Decode(tok)
	return tok, err
}

// Saves a token to a file path.
func saveToken(path string, token *oauth2.Token) {
	fmt.Printf("Saving credential file to: %s\n", path)
	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalf("Unable to cache oauth token: %v", err)
	}
	defer f.Close()
	json.NewEncoder(f).Encode(token)
}

func main() {
	ctx := context.Background()
	b, err := os.ReadFile("credentials.json")
	if err != nil {
		log.Fatalf("Unable to read client secret file: %v", err)
	}

	// If modifying these scopes, delete your previously saved token.json.
	config, err := google.ConfigFromJSON(b, calendar.CalendarScope)
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}
	client := getClient(config)

	srv, err := calendar.NewService(ctx, option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Unable to retrieve Calendar client: %v", err)
	}

	// Membuat event baru
	event := &calendar.Event{
		Summary:     "contoh Event",
		Description: "contoh event di Google Calendar",
		Start: &calendar.EventDateTime{
			DateTime: time.Now().Format(time.RFC3339),
		},
		End: &calendar.EventDateTime{
			DateTime: time.Now().Add(time.Hour).Format(time.RFC3339),
		},
	}
	createdEvent, err := srv.Events.Insert("primary", event).Do()
	if err != nil {
		log.Fatalf("Gagal membuat event: %v", err)
	}
	fmt.Printf("Event berhasil dibuat: %s (%s)\n", createdEvent.Summary, createdEvent.Id)

	// Mengambil daftar event
	events, err := srv.Events.List("primary").Do()
	if err != nil {
		log.Fatalf("Gagal mengambil daftar event: %v", err)
	}
	fmt.Println("Daftar Event:")
	for _, e := range events.Items {
		fmt.Printf("- %s (%s)\n", e.Summary, e.Id)
	}

	// Mengupdate event
	updateEvent := &calendar.Event{
		Summary: "Event Terupdate",
		Start: &calendar.EventDateTime{
			DateTime: createdEvent.Start.DateTime,
		},
		End: &calendar.EventDateTime{
			DateTime: createdEvent.End.DateTime,
		},
	}
	updatedEvent, err := srv.Events.Update("primary", createdEvent.Id, updateEvent).Do()
	if err != nil {
		log.Fatalf("Gagal mengupdate event: %v", err)
	}
	fmt.Printf("Event berhasil diupdate: %s (%s)\n", updatedEvent.Summary, updatedEvent.Id)

	// Menghapus event
	err = srv.Events.Delete("primary", createdEvent.Id).Do()
	if err != nil {
		log.Fatalf("Gagal menghapus event: %v", err)
	}
	fmt.Println("Event berhasil dihapus.")
}
